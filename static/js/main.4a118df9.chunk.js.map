{"version":3,"sources":["constants.js","utils.js","ImagesFeedList.jsx","App.jsx","Favourites.jsx","reportWebVitals.js","index.js"],"names":["mergeFavouritesWithFetched","favourites","fetched","id","byId","Map","favourite","get","push","set","updatedImages","image","fetchImages","searchParam","a","url","constants","fetch","response","json","data","getStoredFavourites","localStorage","getItem","JSON","parse","ImagesFeedList","images","onFavoritesChange","storedFavourites","handleChange","filtered","filter","i","length","liked","setItem","stringify","className","map","webformatURL","tags","Card","sx","maxWidth","CardMedia","component","height","alt","CardActions","disableSpacing","IconButton","marginLeft","onClick","color","colors","red","grey","App","useState","dataFetched","setDataFetched","search","setSearch","setImages","useEffect","imagesFeedClassName","classNames","TextField","variant","placeholder","value","onChange","event","target","onKeyPress","ev","key","then","hits","catch","reason","console","log","message","preventDefault","handleSearchSubmit","Button","to","Favourites","setFavouriteImages","ims","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","path","element","document","getElementById"],"mappings":"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","file":"static/js/main.4a118df9.chunk.js","sourcesContent":["export default {\r\n    API_KEY: \"24642833-3868b73e24fdcd4f0db957430\",\r\n    LOCAL_STORAGE_KEY: 'favouriteImages',\r\n};\r\n","import constants from \"./constants\";\r\n\r\nexport const mergeFavouritesWithFetched = (favourites, fetched) => {\r\n    if (!fetched || !favourites) return;\r\n\r\n    let { id, ...image } = favourites;\r\n\r\n    const byId = new Map();\r\n    for (const { id, ...favourite } of favourites) {\r\n      const favourites = byId.get(id);\r\n      if (favourites) {\r\n        favourites.push(favourite);\r\n      } else {\r\n        byId.set(id, [favourite]);\r\n      }\r\n    }\r\n    const updatedImages = [];\r\n    for (const favourite of fetched) {\r\n      for (const image of byId.get(favourite.id) || [favourite]) {\r\n        updatedImages.push({ ...favourite,  ...image });\r\n      }\r\n    }\r\n    return updatedImages;\r\n};\r\n\r\nexport const fetchImages = async (searchParam) => {\r\n  const url = `https://pixabay.com/api/?key=${constants.API_KEY}&q=${searchParam}&image_type=photo`;\r\n  let response = await fetch(url);\r\n  let data = await response.json();\r\n  return data;\r\n};\r\n\r\nexport const updateStoredFavourites = (favourites) => {\r\n  return localStorage.setItem(constants.LOCAL_STORAGE_KEY, JSON.stringify(favourites));\r\n}\r\n\r\nexport const getStoredFavourites = () => {\r\n  const favourites = localStorage.getItem(constants.LOCAL_STORAGE_KEY);\r\n  return JSON.parse(favourites);\r\n}\r\n\r\n","import React from \"react\";\r\nimport {\r\n  Card,\r\n  CardMedia,\r\n  CardActions,\r\n  IconButton,\r\n  colors,\r\n} from \"@mui/material\";\r\nimport FavoriteIcon from \"@mui/icons-material/Favorite\";\r\n\r\nimport { getStoredFavourites, updateStoredFavourites } from \"./utils\";\r\n\r\nconst ImagesFeedList = ({ images, onFavoritesChange }) => {\r\n  const storedFavourites = getStoredFavourites() || [];\r\n\r\n  const handleChange = (image) => {\r\n    const isInFavourite =\r\n      storedFavourites.filter((i) => i.id === image.id).length > 0;\r\n\r\n    let filtered;\r\n    if (isInFavourite) {\r\n      filtered = storedFavourites.filter((i) => i.id !== image.id);\r\n      onFavoritesChange([...filtered, { ...image, liked: false }]);\r\n    } else {\r\n      filtered = [...storedFavourites, { ...image, liked: true }];\r\n      onFavoritesChange(filtered);\r\n    }\r\n    updateStoredFavourites(filtered);\r\n  };\r\n\r\n  return (\r\n    <div className=\"images-feed__list\">\r\n      {images.map(({ id, webformatURL, tags, liked }) => (\r\n        <Card\r\n          key={id}\r\n          className=\"images-feed__list__item images\"\r\n          sx={{ maxWidth: 345 }}\r\n        >\r\n          <CardMedia\r\n            className=\"images__image\"\r\n            component=\"img\"\r\n            height=\"194\"\r\n            image={webformatURL}\r\n            alt={tags}\r\n          />\r\n          <CardActions disableSpacing>\r\n            <IconButton\r\n              sx={{ marginLeft: \"auto\" }}\r\n              className=\"images__favourite-button\"\r\n              onClick={() => handleChange({ id, webformatURL, tags, liked })}\r\n              aria-label=\"add to favorites\"\r\n            >\r\n              <FavoriteIcon\r\n                sx={\r\n                  liked\r\n                    ? { color: colors.red[\"A200\"] }\r\n                    : { color: colors.grey[300] }\r\n                }\r\n              />\r\n            </IconButton>\r\n          </CardActions>\r\n        </Card>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ImagesFeedList;\r\n","import React, { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport classNames from \"classnames\";\nimport { TextField, Button } from \"@mui/material\";\n\nimport ImagesFeedList from \"./ImagesFeedList\";\nimport {\n  mergeFavouritesWithFetched,\n  getStoredFavourites,\n  fetchImages,\n} from \"./utils\";\n\nconst App = () => {\n  const [dataFetched, setDataFetched] = useState(false);\n  const [search, setSearch] = useState(\"\");\n  const [images, setImages] = useState(null);\n\n  const storedFavourites = getStoredFavourites();\n\n  useEffect(() => {\n    if (storedFavourites && images) {\n      const updatedImages = mergeFavouritesWithFetched(\n        storedFavourites,\n        images\n      );\n      setImages(updatedImages);\n    }\n  }, [dataFetched]);\n\n  const handleFavoritesChange = (favourites) => {\n    const updatedImages = mergeFavouritesWithFetched(favourites, images);\n    setImages(updatedImages);\n  };\n\n  const handleSearchChange = (event) => {\n    setSearch(event.target.value);\n  };\n\n  const handleSearchSubmit = (ev) => {\n    if (ev.key === \"Enter\") {\n      fetchImages(search)\n        .then((data) => {\n          setImages(data.hits);\n          setDataFetched(true);\n        })\n        .catch((reason) => console.log(reason.message));\n      ev.preventDefault();\n    }\n  };\n\n  const imagesFeedClassName = classNames(\"images-feed\", {\n    \"images-feed--no-content\": !dataFetched,\n  });\n\n  return (\n    <div className={imagesFeedClassName}>\n      <TextField\n        className=\"images-feed__search\"\n        variant=\"outlined\"\n        placeholder=\"Search\"\n        value={search}\n        onChange={handleSearchChange}\n        onKeyPress={(ev) => handleSearchSubmit(ev)}\n      />\n      <Button className=\"images-feed__manage-favourite-button\" variant=\"text\">\n        <Link to=\"/favourite\">Manage Favorites</Link>\n      </Button>\n      {images && (\n        <ImagesFeedList\n          images={images}\n          onFavoritesChange={handleFavoritesChange}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default App;","import React, { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button } from \"@mui/material\";\r\n\r\nimport { getStoredFavourites } from \"./utils\";\r\nimport ImagesFeedList from \"./ImagesFeedList\";\r\n\r\nconst Favourites = () => {\r\n  const storedFavourites = getStoredFavourites();\r\n  const [images, setFavouriteImages] = useState(storedFavourites);\r\n\r\n  const handleFavoritesChange = (ims) => {\r\n    setFavouriteImages(ims.filter((i) => i.liked));\r\n  };\r\n\r\n  if (!images.length) return (\r\n    <div className=\"favourites-feed--no-content\">\r\n      <h2>No items left</h2>\r\n      <Button className=\"images-feed__manage-favourite-button\" variant=\"text\">\r\n        <Link to=\"/\">Back to Search?</Link>\r\n      </Button>\r\n    </div>\r\n  );\r\n  return (\r\n    <ImagesFeedList\r\n      images={images}\r\n      onFavoritesChange={handleFavoritesChange}\r\n    />\r\n  );\r\n};\r\n\r\nexport default Favourites;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {\n  HashRouter as Router,\n  Routes,\n  Route\n} from 'react-router-dom';\n\nimport App from './App';\nimport Favourites from './Favourites';\n\nimport reportWebVitals from './reportWebVitals';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <Routes>\n        <Route path=\"/\" element={<App />} />\n        <Route path=\"favourite\" element={<Favourites />} />\n      </Routes>\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}